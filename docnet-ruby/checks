#!/usr/bin/ruby

# encoding: UTF-8

require_relative "Libs/loader.rb"

# ----------------------------------------------------------------------------

puts "- Welcome to DocNet"

puts "- Your user home directory is #{Dir.home}"

docnetHome = "#{Dir.home}/.docnet"

if !File.exist?(docnetHome) then
    puts "- I could not find #{docnetHome}, going to create it."
    FileUtils.mkdir(docnetHome)
end

dataRepositoryHome = "#{docnetHome}/001-36b68946-26d9-4b49-85e3-7b9e2c7d9f84"

if !File.exist?(dataRepositoryHome) then
    puts "- I could not find #{dataRepositoryHome}, going to create it."
    FileUtils.mkdir(dataRepositoryHome)
end

puts "- I am now going to run some basic operations"

data1 = "Hello World!"
nhash1 = DataManager::putBlob(data1)
blob1 = DataManager::getBlobOrNull(nhash1)

if data1 == blob1 then
    puts "- DataManager's BlobsService' ☑️"
else
    puts "- [error] Could not validate DataManager's BlobsService step."
    exit
end

datacarrier1 = {
    "objectId"    => "19a5fd26-f268-456c-8669-587f1ed59ede",
    "mutationId"  => "98c2bdb8-3b71-4f1c-843c-7394749432a5",
    "timeVersion" => 1619963153.0,
    "objectClass" => "DataCarrier",
    "payloadType" => "Text",
    "description" => "Hello World",
    "payload"     => nhash1
}

DataManager::commitObjectoDisk(datacarrier1)

datacarrier2 = {
    "objectId"    => "19a5fd26-f268-456c-8669-587f1ed59ede",
    "mutationId"  => "56f9e34c-593c-4b1e-80f4-82a7e5b5424c",
    "timeVersion" => 1619965424.0,
    "objectClass" => "DataCarrier",
    "payloadType" => "Text",
    "description" => "Hello World",
    "payload"     => nhash1
}

DataManager::commitObjectoDisk(datacarrier2)

dataManagerObjects = DataManager::enumerateObjectsFromDisk().to_a

puts "- Found #{dataManagerObjects.size} object(s)"

if dataManagerObjects.size >= 2 then
    puts "- DataManager Check 1 ☑️"
else
    puts "- [error] Could not validate DataManager Check 1"
    exit
end

if dataManagerObjects.any?{|object| object["objectId"] == "19a5fd26-f268-456c-8669-587f1ed59ede" } then
    puts "- DataManager Check 2 ☑️"
else
    puts "- [error] Could not validate DataManager Check 2"
    exit
end

objectsManagerObjects = ObjectsManager::collectDocNetObjects()

if objectsManagerObjects.size < dataManagerObjects.size then
    puts "- ObjectsManager Check 1 ☑️"
else
    puts "- [error] Could not validate ObjectsManager Check 1"
    exit
end

if objectsManagerObjects.any?{|object| object["objectId"] == "19a5fd26-f268-456c-8669-587f1ed59ede" } then
    puts "- ObjectsManager Check 2 ☑️"
else
    puts "- [error] Could not validate ObjectsManager Check 2"
    exit
end

